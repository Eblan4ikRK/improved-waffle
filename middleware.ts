// middleware.ts
import { NextRequest, NextResponse } from 'next/server';
import { Redis } from '@upstash/redis';
import { Ratelimit } from '@upstash/ratelimit';

// Extend NextRequest to include geo (Vercel-specific)
interface ExtendedNextRequest extends NextRequest {
  geo?: {
    country?: string;
    city?: string;
    region?: string;
    latitude?: string;
    longitude?: string;
  };
}

// --- –ù–ê–°–¢–†–û–ô–ö–ò ---

// 1. –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (ISO 3166-1 alpha-2)
const BLOCKED_COUNTRIES: string[] = [
  'VN', 'CN', 'IN', 'PK', 'BR', 'ID', 'TH', 'TR', 'EG', 'SC', 'IR', 'NG', 'RU'
];

// 2. WHITELIST: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö User-Agent. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö.
// –†–∞—Å—à–∏—Ä–µ–Ω –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–¥–æ–±–∞–≤–ª–µ–Ω—ã 'Mozilla' –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤).
const ALLOWED_USER_AGENTS: string[] = [
  'Mozilla',  // –û–±—â–∏–π –¥–ª—è –º–Ω–æ–≥–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ (Chrome, Firefox, etc.)
  'Chrome',   // Google Chrome, Brave, –∏ –¥—Ä—É–≥–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ Chromium
  'Firefox',  // Mozilla Firefox
  'Safari',   // Apple Safari
  'Edg',      // Microsoft Edge
  'OPR',      // Opera
  // –ü–æ–∏—Å–∫–æ–≤—ã–µ –±–æ—Ç—ã –¥–ª—è SEO
  'Googlebot',
  'Bingbot',
  'Slurp',    // Yahoo
  'DuckDuckBot',
  'YandexBot',
];

// Optional: BLACKLIST –¥–ª—è known bad agents (–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ whitelist —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–π)
// const BLOCKED_USER_AGENTS: string[] = ['curl', 'python-requests', 'bot', 'spider'];

// 3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –û–î–ù–û–ì–û IP-–∞–¥—Ä–µ—Å–∞ (Rate Limit)
const INDIVIDUAL_RATE_LIMIT = { requests: 10, window: '10 s' } as const;

// 4. –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ç–∞–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
// –≠—Ç–æ burst-detection (–ø–∏–∫–æ–≤—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏). –î–ª—è sustained –∞—Ç–∞–∫ —É–º–µ–Ω—å—à–∏—Ç–µ window –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sliding ratelimit.
const ATTACK_THRESHOLD = 10000; // 10,000 –∑–∞–ø—Ä–æ—Å–æ–≤
const ATTACK_TIME_WINDOW_SECONDS = 60; // –∑–∞ 60 —Å–µ–∫—É–Ω–¥

// 5. –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ–± –∞—Ç–∞–∫–µ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
const NOTIFICATION_DELAY_SECONDS = 30; // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥, –∫–∞–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–æ

// 6. –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ASN (Autonomous System Numbers) –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤—Ä–æ–¥–µ VPS/Cloud, —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–ª—è –∞—Ç–∞–∫
// –ü—Ä–∏–º–µ—Ä—ã: OVH (16276), Hetzner (24940), DataCamp (212238), Amazon AWS (16509), DigitalOcean (14061), Vultr (20473)
const BLOCKED_ASNS: number[] = [
  16276,  // OVH
  24940,  // Hetzner
  212238, // DataCamp Limited
  16509,  // Amazon AWS (–º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–¥—Å–µ—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  14061,  // DigitalOcean
  20473,  // Vultr
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ ASN –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–Ω–∞–π–¥–∏—Ç–µ –Ω–∞ whois –∏–ª–∏ ipinfo.io)
];

// --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
let redis: Redis | null = null;
let ratelimit: Ratelimit | null = null;

// Optional: –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limit –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∞—Ç–∞–∫–µ)
// let globalRatelimit: Ratelimit | null = null;

if (process.env.UPSTASH_REDIS_REST_URL && process.env.UPSTASH_REDIS_REST_TOKEN) {
  redis = new Redis({
    url: process.env.UPSTASH_REDIS_REST_URL,
    token: process.env.UPSTASH_REDIS_REST_TOKEN,
  });

  ratelimit = new Ratelimit({
    redis,
    limiter: Ratelimit.slidingWindow(INDIVIDUAL_RATE_LIMIT.requests, INDIVIDUAL_RATE_LIMIT.window),
    analytics: true,
    prefix: 'ratelimit',
  });

  // globalRatelimit = new Ratelimit({
  //   redis,
  //   limiter: Ratelimit.slidingWindow(ATTACK_THRESHOLD, `${ATTACK_TIME_WINDOW_SECONDS} s`),
  //   analytics: true,
  //   prefix: 'global',
  // });
} else {
  console.warn('Upstash Redis environment variables not found. Key security features are disabled.');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Middleware
export async function middleware(request: ExtendedNextRequest) {
  if (!redis || !ratelimit) {
    return NextResponse.next();
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ IP –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TypeScript –∏ —Ä–∞–∑–Ω—ã–º–∏ —Å—Ä–µ–¥–∞–º–∏)
  const ip = (request.headers.get('x-forwarded-for')?.split(',').shift()?.trim() ||
              request.headers.get('x-real-ip') ||
              '127.0.0.1') ?? '127.0.0.1';

  const country = request.geo?.country;
  const userAgent = request.headers.get('user-agent') || '';

  // 1. –°—á–∏—Ç–∞–µ–º –í–°–ï –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞—Ç–∞–∫ (–≤ –Ω–∞—á–∞–ª–µ)
  const { totalRequests, blockedRequests } = await getAttackCounters(redis);

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ç–∞–∫—É (–Ω–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã, –¥–∞–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∂–µ)
  if (totalRequests > ATTACK_THRESHOLD) {
    const notificationSent = await redis.get('notification_sent_flag');
    if (!notificationSent) {
      const passedRequests = totalRequests - blockedRequests; // –ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ
      const attackStrength = (totalRequests / ATTACK_TIME_WINDOW_SECONDS).toFixed(1);

      const message = `üö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞—Ç–∞–∫–∞ –Ω–∞ —Å–∞–π—Ç!* üö®
      
- *–°–∏–ª–∞ –∞—Ç–∞–∫–∏:* ~${attackStrength} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫
- *–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ ~${ATTACK_TIME_WINDOW_SECONDS} —Å–µ–∫:* ${totalRequests}
- *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (Geo/UA/RateLimit):* ${blockedRequests}
- *–ü—Ä–æ—à–ª–æ –Ω–∞ —Å–∞–π—Ç:* ${passedRequests}
      
–ü—Ä–∏–Ω—è—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é.`;

      await sendTelegramMessage(message);
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ 30 —Å–µ–∫—É–Ω–¥ (—Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫)
      await redis.set('notification_sent_flag', 'true', { ex: NOTIFICATION_DELAY_SECONDS });
    }

    // Optional: –ê–≤—Ç–æ-–±–ª–æ–∫ –ø—Ä–∏ –∞—Ç–∞–∫–µ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ)
    // return new NextResponse('Site under attack. Please try later.', { status: 503 });
  }

  // === –¶–ï–ü–û–ß–ö–ê –ü–†–û–í–ï–†–û–ö (–ø–æ—Å–ª–µ –¥–µ—Ç–µ–∫—Ü–∏–∏, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –≤—Å–µ) ===

  // 3. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ
  if (country && BLOCKED_COUNTRIES.includes(country)) {
    await incrementBlockedCounter(redis);
    return new NextResponse(`Access from country ${country} is denied.`, { status: 403 });
  }

  // 4. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ ASN (–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
  const asn = await getAsnForIp(ip, redis);
  if (asn && BLOCKED_ASNS.includes(asn)) {
    await incrementBlockedCounter(redis);
    return new NextResponse(`Access from ASN ${asn} is denied.`, { status: 403 });
  }

  // 5. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ User-Agent (whitelist)
  const isAllowedUserAgent = ALLOWED_USER_AGENTS.some(agent => userAgent.includes(agent));
  if (!isAllowedUserAgent) {
    // Optional: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ blacklist (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ)
    // const isBlockedUserAgent = BLOCKED_USER_AGENTS.some(agent => userAgent.toLowerCase().includes(agent));
    // if (isBlockedUserAgent) {
    await incrementBlockedCounter(redis);
    return new NextResponse('Your browser or bot is not allowed.', { status: 403 });
    // }
  }

  // 6. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π Rate Limit –ø–æ IP
  const { success } = await ratelimit.limit(ip);
  if (!success) {
    await incrementBlockedCounter(redis);
    return new NextResponse('Too many requests. Please try again later.', { status: 429 });
  }

  // Optional: –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limit (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
  // if (globalRatelimit) {
  //   const { success: globalSuccess } = await globalRatelimit.limit('global');
  //   if (!globalSuccess) {
  //     await incrementBlockedCounter(redis);
  //     return new NextResponse('Site under heavy load. Please try again later.', { status: 429 });
  //   }
  // }

  return NextResponse.next();
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async function getAttackCounters(redis: Redis) {
  const totalKey = 'attack:total';
  const blockedKey = 'attack:blocked';

  const pipe = redis.pipeline();
  pipe.incr(totalKey);
  pipe.expire(totalKey, ATTACK_TIME_WINDOW_SECONDS, 'NX');
  pipe.get(blockedKey);
  pipe.expire(blockedKey, ATTACK_TIME_WINDOW_SECONDS, 'NX');

  const results = await pipe.exec();
  if (!results) {
    console.error('Redis pipeline failed in getAttackCounters');
    return { totalRequests: 0, blockedRequests: 0 };
  }

  const totalRequests = results[0] as number;
  const blockedStr = results[2] as string | null;

  return {
    totalRequests,
    blockedRequests: parseInt(blockedStr ?? '0', 10),
  };
}

async function incrementBlockedCounter(redis: Redis) {
  const blockedKey = 'attack:blocked';

  const pipe = redis.pipeline();
  pipe.incr(blockedKey);
  pipe.expire(blockedKey, ATTACK_TIME_WINDOW_SECONDS, 'NX');
  await pipe.exec().catch(err => console.error('Failed to increment blocked counter:', err));
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü–æ–ª—É—á–µ–Ω–∏–µ ASN –ø–æ IP —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Redis (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API ipapi.co)
async function getAsnForIp(ip: string, redis: Redis): Promise<number | null> {
  if (ip === '127.0.0.1' || ip.startsWith('192.168.') || ip === '::1') {
    return null; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ IP
  }

  const cacheKey = `asn:${ip}`;
  const cachedAsn = await redis.get(cacheKey);

  if (cachedAsn) {
    return parseInt(cachedAsn as string, 10);
  }

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ipapi.co (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–æ —Å –ª–∏–º–∏—Ç–∞–º–∏; –¥–ª—è production —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π API –∫–∞–∫ ipinfo.io)
    const response = await fetch(`https://ipapi.co/${ip}/json/`);
    if (!response.ok) {
      console.error(`Failed to fetch ASN for IP ${ip}: ${response.statusText}`);
      return null;
    }

    const data = await response.json();
    const asnStr = data.asn; // –ù–∞–ø—Ä–∏–º–µ—Ä, "AS24940"
    const asn = asnStr ? parseInt(asnStr.replace('AS', ''), 10) : null;

    if (asn) {
      // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
      await redis.set(cacheKey, asn.toString(), { ex: 3600 });
    }

    return asn;
  } catch (error) {
    console.error(`Error fetching ASN for IP ${ip}:`, error);
    return null;
  }
}

async function sendTelegramMessage(text: string) {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  if (!token || !chatId) {
    console.warn('Telegram credentials are not set. Cannot send notification.');
    return;
  }

  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'Markdown' }),
    });
    if (!response.ok) {
      console.error('Telegram API error:', await response.text());
    }
  } catch (error) {
    console.error('Failed to send Telegram message:', error);
  }
}

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
